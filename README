mgod 0.5
a mini gopher server for inetd

Mgod can serve a directory structure, taking extra data from hidden files in
each directory (called .gopher).  It can invoke external scripts or
executables for search string processing.
Gopher+ is supported.


INSTALLING

Compile the server by typing "make".
Add this line to your /etc/inetd.conf:

gopher    stream    tcp    nowait    nobody    /usr/sbin/tcpd    <exec>

Replace <exec> with your mgod command line:
/path/to/mgod -n server_name -r root_dir

Then restart inetd.

ARGUMENTS

-n <servername>
    Set server name (default 127.0.0.1). You'll need to set this to the
    visible internet name of your server.

-p <serverport>
    Set server port (default 70).

-r <rootdir>
    Set the root directory of your content (default /var/gopher).

-a <adminstring>
    Set administrator string.
    Should be like "Name <email>"

-l <logfile>
    Enable logging to a file.

-b <basename>
    Use filename instead of ".gopher" (appending .rec for ".gopher.rec")

CONTENT

All normal files (that don't begin with '.') and directories under the root
dir are served and included in the menu. You can control menu generation by
creating a file named ".gopher" in the directory in question.

Along the path, every directory is checked for the existence of a file called
".gopher.rec" (for recursive). If it exists, it's read the same way as a
menu file. It can't contain any menu items or info lines, otherwise things
will break. However, you can set options perfectly well.

A menu file is included in the menu before the directory listing, each line
as an info line, unless the line begins with a special control character.
These control characters can influence menu generation. They are:

#
    Lines beginning with # are ignored.

"
    Use the rest as an info line (so you may have an info line beginning with
    any special character).

:
    Include the rest of the line directly in the menu. This is useful for
    external links. For example:

    :1Quux Gopher Site<TAB><TAB>gopher.quux.org<TAB>70

.
    Include the rest of the line directly in the menu; append server
    address and port. Useful for custom internal links. For example:

    .0About Us<TAB>aboutus.txt

`
    Works like ".", except the current path is prepended to the link.
    (So this is more useful.)

!
    The rest of the line is interpreted as a special command.
    These can be:
    nolist   - disable automatic directory listing (so only the contents
                of .gopher will be visible in the menu)
    reverse  - reverse the direction of file sorting
    mtime    - sort by time of last modification instead of file name
    dirmixed - sort directories together with files (instead of placing
               them first)
    blog     - a hack: mtime is prepended to file descriptions
    include <file> - read file as a control file
    proc <command> - execute command, interpret output as control file
    limit [num]    - limit directory lists to n entries (def 20)

    summary [length] - first LENGTH (default 72) printable characters are
                       appended after text files as a summarizing info line

    For example to list files by mtime in reverse order:

    !reverse
    !mtime

=
    You can specify name aliases for entries of the file list.
    The format is:

    =Description<TAB>filename

    When a filename matching an alias is encountered, its description
    showing in the menu will be as given (instead of just the file name).
    If the description is an empty string, the file will be skipped
    altogether.


When the request was made in gopher+ mode, the VIEWS+ block is autogenerated
for user-specified links (guessing the content type from the first character of
the link).

The server generates html redirect pages for URL:<url> style requests (as
the wikipedia article on gopher describes).

Files with the .g extension are included in the menu as menu files (type 1),
with the .g removed from the description. When serving such a file, it's opened
and processed as a control file.

EXTERNAL PROCESSORS

There are two kinds of external processor requests - when the request begins
with '!', and when with a '@'. These serve as gateways to an external
program that can use a search string to generate results.  You can define
your processors in a file named ".search".

Each row in the .search file is a TAB-separated record:
name<TAB>executable<TAB>arg1<TAB>arg2...

The first two items are mandatory. They define the name under one can invoke
the program; and the executable that is started to handle the request.
Further (optional) items in the record are passed on to the executable as
arguments; then the search string (if any) is added as the final argument.

With '!' requests, the external processor's output is unmanaged: it's passed
directly to the client. This way, the processor is responsible for handling
gopher+ requests too (this is indicated by adding another argument at the
end, a single "$").

When the request begins with a '@', the output of the processor is
interpreted as in the .gopher file format (and thus gopher+ requests are
automatically handled).

As an example, we can create a processor to output the first N numbers.
This program might look like this:

#!/bin/bash
echo "Hello $1!"
for((n=1;n<=$2;n++)); do
echo "$n"
done

We'll save it in counter.sh (with chmod a+x). Then register it in .search:

counter	counter.sh	World

Finally, create a link in .gopher:

.7First N numbers	@counter

This way, if a user visits our site and clicks on the "First N numbers"
link, they are presented with an input box. After entering "5", the output
is:

  Hello World!
  1
  2
  3
  4
  5

HTTPGATE

httpgate.c is a small CGI program that provides a HTTP gateway for your gopher
content. It calls mgod directly to obtain the data.

To use it, copy httpgate.cfg.h.sample to httpgate.cfg.h, and edit it for
configuration (such as the path to the mgod executable). Then compile httpgate
("make httpgate"). Finally, set up your web server to use the resulting file
as a CGI.

LICENSE

GPL version 2.

AUTHOR

Mate Nagy <k-zed@hactar.net>

